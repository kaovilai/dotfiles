{
  "name": "Claude Code Sandbox",
  "build": {
    "dockerfile": "Dockerfile",
    "args": {
      "TZ": "${localEnv:TZ:America/Los_Angeles}",
      "CLAUDE_CODE_VERSION": "latest",
      "GIT_DELTA_VERSION": "0.18.2",
      "ZSH_IN_DOCKER_VERSION": "1.2.0"
    }
  },
  // Docker-outside-of-Docker Feature
  // Purpose: Re-use the host Docker socket, adding the Docker CLI to the container
  // This allows running Docker commands from inside the dev container using the host's Docker socket
  //
  // Usage:
  // "features": {
  //   "ghcr.io/devcontainers/features/docker-outside-of-docker:1": {
  //     "version": "latest",              // Docker/Moby CLI version (default: latest)
  //     "moby": true,                     // Install OSS Moby build instead of Docker CE (default: true)
  //     "dockerDashComposeVersion": "v2", // Compose version: v1, v2, or none (default: v2)
  //     "installDockerBuildx": true       // Install Docker Buildx (default: true)
  //   }
  // },
  //
  // Limitations:
  // - Requires host running Docker
  // - Host and container must have same chip architecture
  // - Does not support bind mounting workspace folder by default
  //
  // Reference: https://github.com/devcontainers/features/blob/main/src/docker-outside-of-docker/README.md
  "runArgs": [
    "--cap-add=NET_ADMIN",
    "--cap-add=NET_RAW"
  ],
  "customizations": {
    "vscode": {
      "extensions": [
        "anthropic.claude-code",
        "dbaeumer.vscode-eslint",
        "esbenp.prettier-vscode",
        "eamodio.gitlens"
      ],
      "settings": {
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.codeActionsOnSave": {
          "source.fixAll.eslint": "explicit"
        },
        "terminal.integrated.defaultProfile.linux": "zsh",
        "terminal.integrated.profiles.linux": {
          "bash": {
            "path": "bash",
            "icon": "terminal-bash"
          },
          "zsh": {
            "path": "zsh"
          }
        }
      }
    }
  },
  "remoteUser": "node",
  "mounts": [
    "source=claude-code-bashhistory-${devcontainerId},target=/commandhistory,type=volume",
    "source=claude-code-config-${devcontainerId},target=/home/node/.claude,type=volume",
    "source=${localEnv:HOME}${localEnv:USERPROFILE}/.gnupg,target=/home/node/.gnupg,type=bind,consistency=cached"
  ],
  "containerEnv": {
    "NODE_OPTIONS": "--max-old-space-size=4096",
    "CLAUDE_CONFIG_DIR": "/home/node/.claude",
    "POWERLEVEL9K_DISABLE_GITSTATUS": "true"
  },
  "workspaceMount": "source=${localWorkspaceFolder},target=/workspace,type=bind,consistency=delegated",
  "workspaceFolder": "/workspace",
  "postCreateCommand": "test -f /home/node/.claude/.claude.json || cp /workspace/.devcontainer/.claude.json /home/node/.claude/.claude.json",
  "postStartCommand": "sudo /usr/local/bin/init-firewall.sh",
  "waitFor": "postStartCommand"
}
