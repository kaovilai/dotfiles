znap function create-ocp-aws() {
    # Core implementation for AWS OpenShift cluster creation
    # Parameters:
    #   $1 - Command/option (help, gather, delete, no-delete)
    #   $2 - Architecture (arm64 or amd64)
    
    # Unset SSH_AUTH_SOCK on Darwin systems to avoid SSH errors
    if [[ "$(uname)" == "Darwin" ]]; then
        unset SSH_AUTH_SOCK
    fi
    
    # Get openshift-install binary
    local OPENSHIFT_INSTALL=$(get_openshift_install)
    [[ -z "$OPENSHIFT_INSTALL" ]] && return 1
    local ARCHITECTURE=$2
    local ARCH_SUFFIX=${2}
    $OPENSHIFT_INSTALL version
    # Check if help is requested
    if [[ $1 == "help" ]]; then
        echo "Usage: create-ocp-aws-$ARCH_SUFFIX [OPTION]"
        echo "Create an OpenShift cluster on AWS using $ARCHITECTURE architecture"
        echo ""
        echo "Options:"
        echo "  help      Display this help message"
        echo "  gather    Gather bootstrap logs from the installation directory"
        echo "  delete    Just delete the cluster without recreating it"
        echo "  no-delete Skip deletion of existing cluster before creation"
        echo ""
        echo "Prerequisites:"
        echo "  - AWS_REGION environment variable (defaults to us-east-1 if not set)"
        echo "  - AWS_BASEDOMAIN environment variable (defaults to mg.dog8code.com if not set)"
        echo "  - AWS credentials must be configured"
        echo "  - SSH key must be added to the agent (ssh-add ~/.ssh/id_rsa)"
        echo "  - Pull secret must exist at ~/pull-secret.txt"
        echo ""
        echo "Directory:"
        echo "  Installation files will be created in: $OCP_MANIFESTS_DIR/$TODAY-aws-$ARCH_SUFFIX"
        echo ""
        echo "Note:"
        echo "  When creating clusters alongside existing ones (option 3), a unique"
        echo "  name will be generated by adding a suffix (e.g., -1, -2) to avoid conflicts"
        return 0
    fi
    
    # Set default values for AWS_REGION and AWS_BASEDOMAIN if not already set
    if [[ -z "$AWS_REGION" ]]; then
        echo "INFO: AWS_REGION not set, defaulting to us-east-1"
        AWS_REGION="us-east-1"
    fi
    
    if [[ -z "$AWS_BASEDOMAIN" ]]; then
        echo "INFO: AWS_BASEDOMAIN not set, defaulting to mg.dog8code.com"
        AWS_BASEDOMAIN="mg.dog8code.com"
    fi
    
    # Validate AWS credentials are configured
    if ! aws sts get-caller-identity &>/dev/null; then
        echo "ERROR: AWS credentials not configured. Please run 'aws configure' or set AWS credentials"
        return 1
    fi
    
    # Verify that the requested architecture is supported by the installer
    if ! $OPENSHIFT_INSTALL version | grep -q "release architecture $ARCHITECTURE"; then
        echo "WARN: $ARCHITECTURE architecture not supported in current release payload"
        echo "WARN: To use $ARCHITECTURE, you need an openshift-install binary built for $ARCHITECTURE"
        echo "WARN: Run 'openshift-install version' to check if 'release architecture $ARCHITECTURE' is present"
        return 1
    else
        echo "INFO: Using $ARCHITECTURE architecture for cluster nodes (supported by current release payload)"
    fi
    
    # Safety check - ensure TODAY is not empty
    if [[ -z "$TODAY" ]]; then
        echo "WARNING: TODAY variable is empty, using current date"
        TODAY=$(date +%Y%m%d)
    fi
    
    # Set initial cluster name and directory
    local CLUSTER_BASE_NAME="tkaovila-$TODAY-$ARCH_SUFFIX"
    local OCP_CREATE_DIR_BASE="$OCP_MANIFESTS_DIR/$TODAY-aws-$ARCH_SUFFIX"
    
    # Generate unique cluster name if needed
    local unique_result=$(generate_unique_cluster_name "$CLUSTER_BASE_NAME" "$OCP_CREATE_DIR_BASE")
    [[ -z "$unique_result" ]] && return 1
    local CLUSTER_NAME=$(echo "$unique_result" | grep "cluster_name:" | cut -d: -f2)
    local OCP_CREATE_DIR=$(echo "$unique_result" | grep "cluster_dir:" | cut -d: -f2)
    
    if [[ $1 == "gather" ]]; then
        if [[ -d "$OCP_CREATE_DIR" ]]; then
            $OPENSHIFT_INSTALL gather bootstrap --dir $OCP_CREATE_DIR || return 1
        else
            echo "Directory $OCP_CREATE_DIR does not exist, cannot gather bootstrap logs"
            return 1
        fi
        return 0
    fi
    
    if [[ $1 != "no-delete" ]]; then
        if [[ -d "$OCP_CREATE_DIR" ]]; then
            $OPENSHIFT_INSTALL destroy cluster --dir $OCP_CREATE_DIR || echo "no existing cluster"
            $OPENSHIFT_INSTALL destroy bootstrap --dir $OCP_CREATE_DIR || echo "no existing bootstrap"
            ((rm -r $OCP_CREATE_DIR && echo "removed existing create dir") || (true && echo "no existing install dir")) || return 1
        else
            echo "Directory $OCP_CREATE_DIR does not exist, nothing to delete"
        fi
    fi
    
    # if param is delete then stop here
    if [[ $1 == "delete" ]]; then
        return 0
    fi
    
    # Check for existing clusters before proceeding
    check-for-existing-clusters "aws" "$ARCH_SUFFIX" || return 1
    
    # Prompt for release stream selection and get release image
    local stream=$(prompt_release_stream)
    local RELEASE_IMAGE=$(get_release_image "$stream" "$ARCHITECTURE")
    [[ -z "$RELEASE_IMAGE" ]] && return 1
    
    # Use the architecture-specific release image
    echo "INFO: Using architecture-specific release image for $ARCHITECTURE: $RELEASE_IMAGE"
    # Export the release image override
    export OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE=$RELEASE_IMAGE
    echo "INFO: Exported OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE=$RELEASE_IMAGE"
    mkdir -p $OCP_CREATE_DIR || return 1
    
    {
        create_install_config_header
        echo "baseDomain: $AWS_BASEDOMAIN
compute:
- architecture: $ARCHITECTURE
  hyperthreading: Enabled
  name: worker
  platform: {}
  replicas: 3
controlPlane:
  architecture: $ARCHITECTURE
  hyperthreading: Enabled
  name: master
  platform: {}
  replicas: 3
metadata:
  creationTimestamp: null
  name: $CLUSTER_NAME
networking:
  clusterNetwork:
  - cidr: 10.128.0.0/14
    hostPrefix: 23
  machineNetwork:
  - cidr: 10.0.0.0/16
  networkType: OVNKubernetes
  serviceNetwork:
  - 172.30.0.0/16
platform:
  aws:
    region: $AWS_REGION
publish: External"
        add_credentials_to_install_config
    } > $OCP_CREATE_DIR/install-config.yaml || return 1
    
    echo "created install-config.yaml"
    
    $OPENSHIFT_INSTALL create manifests --dir $OCP_CREATE_DIR || return 1
    
    # Create the cluster with error handling
    if ! $OPENSHIFT_INSTALL create cluster --dir $OCP_CREATE_DIR --log-level=info; then
        cleanup_on_failure "$OCP_CREATE_DIR" "$CLUSTER_NAME" "aws"
        return 1
    fi
    
    # Cleanup
    unset OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE
    [[ -n "$PROCEED_WITH_EXISTING_CLUSTERS" ]] && unset PROCEED_WITH_EXISTING_CLUSTERS
}

znap function create-ocp-aws-arm64() {
    # ARM64 wrapper function
    create-ocp-aws "$1" "arm64"
}

znap function create-ocp-aws-amd64() {
    # AMD64 wrapper function
    create-ocp-aws "$1" "amd64"
}
