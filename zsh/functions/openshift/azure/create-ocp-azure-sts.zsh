# create a cluster with azure workload identity using CCO manual mode
# pre-req: ssh-add ~/.ssh/id_rsa
znap function create-ocp-azure-sts(){
    # Unset SSH_AUTH_SOCK on Darwin systems to avoid SSH errors
    if [[ "$(uname)" == "Darwin" ]]; then
        unset SSH_AUTH_SOCK
    fi
    
    # Get openshift-install binary
    local OPENSHIFT_INSTALL=$(get_openshift_install)
    [[ -z "$OPENSHIFT_INSTALL" ]] && return 1
    $OPENSHIFT_INSTALL version
    # Check if help is requested
    if [[ $1 == "help" ]]; then
        echo "Usage: create-ocp-azure-sts [OPTION]"
        echo "Create an OpenShift cluster on Azure with Workload Identity Federation"
        echo ""
        echo "Options:"
        echo "  help      Display this help message"
        echo "  gather    Gather bootstrap logs from the installation directory"
        echo "  delete    Just delete the cluster without recreating it"
        echo "  no-delete Skip deletion of existing cluster before creation"
        echo ""
        echo "Prerequisites:"
        echo "  - AZURE_SUBSCRIPTION_ID environment variable must be set"
        echo "  - AZURE_TENANT_ID environment variable must be set"
        echo "  - AZURE_REGION environment variable must be set"
        echo "  - AZURE_BASEDOMAIN environment variable must be set"
        echo "  - AZURE_RESOURCE_GROUP environment variable must be set"
        echo "  - SSH key must be added to the agent (ssh-add ~/.ssh/id_rsa)"
        echo "  - Pull secret must exist at ~/pull-secret.txt"
        echo "  - Azure CLI must be installed and logged in (az login)"
        echo ""
        echo "Directory:"
        echo "  Installation files will be created in: $OCP_MANIFESTS_DIR/$TODAY-azure-sts"
        echo ""
        echo "Note:"
        echo "  When creating clusters alongside existing ones (option 3), a unique"
        echo "  name will be generated by adding a suffix (e.g., -1, -2) to avoid conflicts"
        return 0
    fi
    
    # Safety check - ensure TODAY is not empty
    if [[ -z "$TODAY" ]]; then
        echo "WARNING: TODAY variable is empty, using current date"
        TODAY=$(date +%Y%m%d)
    fi
    
    # Set initial cluster name and directory
    local CLUSTER_BASE_NAME="tkaovila-$TODAY-sts"
    local OCP_CREATE_DIR_BASE="$OCP_MANIFESTS_DIR/$TODAY-azure-sts"
    
    # Generate unique cluster name if needed
    local unique_result=$(generate_unique_cluster_name "$CLUSTER_BASE_NAME" "$OCP_CREATE_DIR_BASE")
    [[ -z "$unique_result" ]] && return 1
    local CLUSTER_NAME=$(echo "$unique_result" | grep "cluster_name:" | cut -d: -f2)
    local OCP_CREATE_DIR=$(echo "$unique_result" | grep "cluster_dir:" | cut -d: -f2)
    
    # Generate valid Azure storage account name (3-24 chars, lowercase letters and numbers only)
    local STORAGE_ACCOUNT_NAME=$(echo "$CLUSTER_NAME" | tr -d '-' | tr '[:upper:]' '[:lower:]' | cut -c1-24)
    if [[ $1 == "gather" ]]; then
        if [[ -d "$OCP_CREATE_DIR" ]]; then
            $OPENSHIFT_INSTALL gather bootstrap --dir $OCP_CREATE_DIR || return 1
        else
            echo "Directory $OCP_CREATE_DIR does not exist, cannot gather bootstrap logs"
            return 1
        fi
        return 0
    fi
    if [[ $1 != "no-delete" ]]; then
        if [[ -d "$OCP_CREATE_DIR" ]]; then
            $OPENSHIFT_INSTALL destroy cluster --dir $OCP_CREATE_DIR || echo "no existing cluster"
            $OPENSHIFT_INSTALL destroy bootstrap --dir $OCP_CREATE_DIR || echo "no existing bootstrap"
            (ccoctl azure delete \
            --name $CLUSTER_NAME \
            --subscription-id $AZURE_SUBSCRIPTION_ID \
            --region $AZURE_REGION \
            --storage-account-name $STORAGE_ACCOUNT_NAME \
            --delete-oidc-resource-group && echo "cleaned up ccoctl azure resources") || true
            ((rm -r $OCP_CREATE_DIR && echo "removed existing create dir") || (true && echo "no existing install dir")) || return 1
        else
            echo "Directory $OCP_CREATE_DIR does not exist, nothing to delete"
        fi
    fi
    # if param is delete then stop here
    if [[ $1 == "delete" ]]; then
        return 0
    fi
    
    # Validate required Azure environment variables
    validate_env_vars "azure" \
        AZURE_SUBSCRIPTION_ID \
        AZURE_TENANT_ID \
        AZURE_REGION \
        AZURE_BASEDOMAIN \
        AZURE_RESOURCE_GROUP || return 1
    
    # Set AZURE_BASEDOMAIN_RESOURCE_GROUP to AZURE_RESOURCE_GROUP if not set
    if [[ -z "$AZURE_BASEDOMAIN_RESOURCE_GROUP" ]]; then
        echo "INFO: AZURE_BASEDOMAIN_RESOURCE_GROUP not set, defaulting to AZURE_RESOURCE_GROUP ($AZURE_RESOURCE_GROUP)"
        AZURE_BASEDOMAIN_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP
    fi
    
    # Check for existing clusters before proceeding
    check-for-existing-clusters "azure" || return 1
    
    # Prompt for release stream selection and get release image
    local stream=$(prompt_release_stream)
    local RELEASE_IMAGE=$(get_release_image "$stream" "multi")
    [[ -z "$RELEASE_IMAGE" ]] && return 1
    
    echo "INFO: Using release image: $RELEASE_IMAGE"
    # make sure logged into registry since cco steps requires it.
    BASE_RELEASE_IMAGE_REGISTRY=$(echo $RELEASE_IMAGE | awk -F/ '{print $1}')

    # Handle registry login and pull secret update
    handle_registry_login "$BASE_RELEASE_IMAGE_REGISTRY"
    update_pull_secret_with_podman "$BASE_RELEASE_IMAGE_REGISTRY"
    mkdir -p $OCP_CREATE_DIR && \
    echo "additionalTrustBundlePolicy: Proxyonly
apiVersion: v1
baseDomain: $AZURE_BASEDOMAIN
compute:
- architecture: amd64
  hyperthreading: Enabled
  name: worker
  platform: {}
  replicas: 3
controlPlane:
  architecture: amd64
  hyperthreading: Enabled
  name: master
  platform: {}
  replicas: 3
metadata:
  creationTimestamp: null
  name: $CLUSTER_NAME
networking:
  clusterNetwork:
  - cidr: 10.128.0.0/14
    hostPrefix: 23
  machineNetwork:
  - cidr: 10.0.0.0/16
  networkType: OVNKubernetes
  serviceNetwork:
  - 172.30.0.0/16
platform:
  azure:
    region: $AZURE_REGION
    resourceGroupName: $AZURE_RESOURCE_GROUP
    baseDomainResourceGroupName: $AZURE_BASEDOMAIN_RESOURCE_GROUP
    networkResourceGroupName: $AZURE_NETWORK_RESOURCE_GROUP
    virtualNetwork: $AZURE_VIRTUAL_NETWORK
    controlPlaneSubnet: $AZURE_CONTROL_PLANE_SUBNET
    computeSubnet: $AZURE_COMPUTE_SUBNET
publish: External
credentialsMode: Manual # needed for STS
pullSecret: '$(cat ~/pull-secret.txt)'
sshKey: |
  $(cat ~/.ssh/id_rsa.pub)
" > $OCP_CREATE_DIR/install-config.yaml && echo "created install-config.yaml" || return 1

echo "INFO: Using multi-architecture release image for Azure: $RELEASE_IMAGE"

# Export the release image override
export OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE=$RELEASE_IMAGE
echo "INFO: Exported OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE=$RELEASE_IMAGE"
# Extract the list of CredentialsRequest custom resources (CRs) from the OpenShift Container Platform release image by running the following command:
echo "extracting credential-requests" && oc adm release extract \
  --from=$RELEASE_IMAGE \
  --credentials-requests \
  --included \
  --install-config=$OCP_CREATE_DIR/install-config.yaml \
  --to=$OCP_CREATE_DIR/credentials-requests || return 1 #credential requests are stored in credentials-requests dir

# Create Azure service principal and credentials using ccoctl
ccoctl azure create-all \
--name $CLUSTER_NAME \
--subscription-id $AZURE_SUBSCRIPTION_ID \
--tenant-id $AZURE_TENANT_ID \
--region $AZURE_REGION \
--installation-resource-group-name $AZURE_RESOURCE_GROUP \
--dnszone-resource-group-name $AZURE_BASEDOMAIN_RESOURCE_GROUP \
--storage-account-name $STORAGE_ACCOUNT_NAME \
--output-dir $OCP_CREATE_DIR \
--credentials-requests-dir $OCP_CREATE_DIR/credentials-requests || return 1

    $OPENSHIFT_INSTALL create manifests --dir $OCP_CREATE_DIR || return 1
    cp $OCP_CREATE_DIR/credentials-requests/* $OCP_CREATE_DIR/manifests/ || return 1 # copy cred requests to manifests dir, ccoctl delete will delete cred requests in separate dir
    
    # Create the cluster with error handling
    if ! $OPENSHIFT_INSTALL create cluster --dir $OCP_CREATE_DIR --log-level=info; then
        cleanup_on_failure "$OCP_CREATE_DIR" "$CLUSTER_NAME" "azure"
        return 1
    fi
    
    echo "azure-tenant-id: $AZURE_TENANT_ID"
    echo "azure-subscription-id: $AZURE_SUBSCRIPTION_ID"
    echo "azure-resource-group: $AZURE_RESOURCE_GROUP"
    
    # Cleanup
    unset OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE
    [[ -n "$PROCEED_WITH_EXISTING_CLUSTERS" ]] && unset PROCEED_WITH_EXISTING_CLUSTERS
}
